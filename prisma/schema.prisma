// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  phone     String
  firstName String
  lastName  String
  password  String
  role      String   @default("USER")
  address   Address?
  cart      Cart?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        Int      @id @default(autoincrement())
  street    String
  city      String
  state     String
  zip       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  sku         String?
  price       Float
  image       String
  variants    Variant[]
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  promotions  Promotion?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Variant {
  id        Int         @id @default(autoincrement())
  name      String
  values    String[]
  image     String?
  quantity  Int
  productId Int
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  items     CartItem[]
  orders    OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discount {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  type      String
  value     Float
  active    Boolean  @default(true)
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promotion {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  newPrice    Float
  active      Boolean @default(true)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int     @unique
}

model Order {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id])
  userId     Int
  items      OrderItem[]
  total      Float
  discount   Discount?   @relation(fields: [discountId], references: [id])
  discountId Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  variant   Variant  @relation(fields: [variantId], references: [id])
  variantId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
